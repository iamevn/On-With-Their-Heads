(defn getRandom [set]
  "gets a random element from a set"
  (rand-nth (seq set)))
(defn suffix [word]
  "word with first L characters cut out"
  (.toLowerCase (.substring word L)))
(defn prefix [word]
  "first L characters of word"
  (.toLowerCase (subs word 0 L)))
(use 'clojure.java.io)
(defn addDict [dictfile]
  "Read words from dictionary file into wordset, returns that set"
  (with-open [rdr (reader dictfile)]
    (apply hash-set
           (remove (fn [str] (re-find #"[-']" str))
                   (line-seq rdr)))))
(def wordset (addDict dict))
(defn prefixmap [wordset]
  "Build map of prefixes to words from set of words"
  ;; Make a new hash-map
  ;; for each element in wordset
  ;; use first L characters as key
  ;; if key exists: cons element to value for that key
  ;; else insert key and the list containing element to map
  (defn buildMap [premap wordset]
    (let [word (first wordset)]
      (if word
        (if (> (.length word) L)
          (let [prefix (prefix word)]
            (recur (assoc premap prefix (cons word (get premap prefix)))
                   (rest wordset)))
          (recur premap (rest wordset)))
        premap)))
  (buildMap (hash-map) wordset))
(defn suffixmap [wordset]
  "Build a map of suffixes to words from a set of words"
  (defn buildMap [suffmap wordset]
    (let [word (first wordset)]
      (if word
        (if (> (.length word) L)
          (let [suffix (.toLowerCase (suffix word))]
            (recur (assoc suffmap suffix (cons word (get suffmap suffix)))
                   (rest wordset)))
          (recur suffmap (rest wordset)))
        suffmap)))
  (buildMap (hash-map) wordset))
(def premap (prefixmap wordset))
(def suffmap (suffixmap wordset))
(defn str-split [str L]
  "splits str into a list of (/ (.length str) L)
   substrings of length L and returns them in a list
   ex: (str-split \"foobar\" 4) => '(\"foob\" \"ar\")"
  (map (fn [idx]
         (.substring str
                     (* L idx)
                     (min (* L (+ idx 1))
                          (.length str))))
       (range (int (Math/ceil (/ (.length str) L)))))
  )
(def rnd (java.util.Random.))
(defn get-word-for-prefix [prefix]
  "returns a random word for the given prefix (uses premap)
   returns nil if no words for given prefix"
  (let [poss-words (get premap prefix)]
    (if poss-words
      (nth poss-words (.nextInt rnd (count poss-words)))
      nil)))
(defn generateForWord [word]
  "if word isn't length multiple of L return false
   split word into L length segments
   get an option for each segment
   if any segment doesn't have an option return false
   return in a list, each option"
  (if (not= (mod (.length word) L) 0)
    false
    (let [seg-list (str-split word L)
          res-list (map get-word-for-prefix seg-list)]
      (if (reduce (fn [a b] (and a b)) true res-list)
        res-list
        false))))
(defn generatePuzzles [n]
  "generates n puzzles by finding a random word
   of length L that forms a puzzle"
  (when (> n 0)
    (let [possWord (getRandom wordset)
          possPuzz (generateForWord possWord)]
      (if possPuzz (do
                     (println possWord ":"
                              possPuzz ":" 
                              (map
                                (fn [word]
                                  (.concat "-" (suffix word)))
                                possPuzz))
                     (recur (- n 1)))
        (recur n)))))
(defn genPuzz []
  "generate single puzzle"
  (generatePuzzles 1))
(defn remove-first [f [head & tail]]
  "remove first instance of f from a sequence"
   (if (f head)
       tail
       (cons head (lazy-seq (remove-first f tail)))))
(defn permutations [s]
  "sequence of permutations of s"
  (comment (lazy-seq
             (if (seq (rest s))
               (apply concat (for [x s]
                               (map #(cons x %)
                                    (permutations (remove-first #{x} s))))) 
               [s])))
  (combo/permutations s))
(defn cart-prod [ls]
  "for each sublist in the list, interleave the elements
  (combos '((a b) (1 2))) => '((a 1) (a 2) (b 1) (b 2))"
  (apply combo/cartesian-product ls))
(defn findSolution [wordLst]
  "takes a list of words and uses their prefixes to try
  to find another word:
  (findSolution '('alacrity' 'terminus' 'bassinet')) -> 'alabaster'"
  (let [prefixLst (map (fn [word] (.substring word 0 L)) wordLst)
        possStrings (map (fn [strLst] (apply str strLst))
                         (permutations prefixLst))]
    (filter (fn [string] (get wordset string))
            possStrings)))
(defn solvePuzzle [clueLst]
  "--solver--
   takes list of suffixes, outputs possible solutions
   (solvePuzzle '(\"crity\" \"minus\" \"sinet\"))"
  (let [possibleWords (map (fn [end] (get suffmap end)) clueLst)]
    (remove (fn [ls] (empty? ls))
            (map findSolution (cart-prod possibleWords)))))
(cart-prod '((a b c) (1 2 3)))
(source comment
)
(source comment)
(remove-first 'a '(a b c))
(genPuzz)
(findSolution '("paroxysms" "oles"))
(solvePuzzle '("oxysms" "s"))
(genPuzz)
(solvePuzzle '("reunto" "yphean"))
(genPuzz)
(solvePuzzle '("rglasses" "i" "ers" "twhile"))
;; Prefix length L
;;
;; Solving:
;; -------
;; Read words into hashmap and hashset
;;   map: ending -> list of words with that ending
;;   set: words
;;
;; given n word endings:
;;   print possibilities for each ending
;;   try each order of each possibility to test if they exist
;;   print those that work
;;
;; Generating:
;; ----------
;; Read words into hashmap of prefixes to words
;;
;; given a word with length of n*L, n subset of integers:
;;   split word into L/n prefixes
;;   for each prefix:
;;     display possible words starting with that prefix
(ns puzz
  (:require [clojure.math.combinatorics :as combo]))
(def L 3)
(def dict "/usr/share/dict/words")
(defn getRandom [set]
  "gets a random element from a set"
  (rand-nth (seq set)))
(defn suffix [word]
  "word with first L characters cut out"
  (.toLowerCase (.substring word L)))
(defn prefix [word]
  "first L characters of word"
  (.toLowerCase (subs word 0 L)))
(use 'clojure.java.io)
(defn addDict [dictfile]
  "Read words from dictionary file into wordset, returns that set"
  (with-open [rdr (reader dictfile)]
    (apply hash-set
           (remove (fn [str] (or (re-find #"[-']" str)
                                 (.equals str (.toLowerCase str))))
                   (line-seq rdr)))))
(def wordset (addDict dict))
(defn prefixmap [wordset]
  "Build map of prefixes to words from set of words"
  ;; Make a new hash-map
  ;; for each element in wordset
  ;; use first L characters as key
  ;; if key exists: cons element to value for that key
  ;; else insert key and the list containing element to map
  (defn buildMap [premap wordset]
    (let [word (first wordset)]
      (if word
        (if (> (.length word) L)
          (let [prefix (prefix word)]
            (recur (assoc premap prefix (cons word (get premap prefix)))
                   (rest wordset)))
          (recur premap (rest wordset)))
        premap)))
  (buildMap (hash-map) wordset))
(defn suffixmap [wordset]
  "Build a map of suffixes to words from a set of words"
  (defn buildMap [suffmap wordset]
    (let [word (first wordset)]
      (if word
        (if (> (.length word) L)
          (let [suffix (.toLowerCase (suffix word))]
            (recur (assoc suffmap suffix (cons word (get suffmap suffix)))
                   (rest wordset)))
          (recur suffmap (rest wordset)))
        suffmap)))
  (buildMap (hash-map) wordset))
(def premap (prefixmap wordset))
(def suffmap (suffixmap wordset))
(defn str-split [str L]
  "splits str into a list of (/ (.length str) L)
   substrings of length L and returns them in a list
   ex: (str-split \"foobar\" 4) => '(\"foob\" \"ar\")"
  (map (fn [idx]
         (.substring str
                     (* L idx)
                     (min (* L (+ idx 1))
                          (.length str))))
       (range (int (Math/ceil (/ (.length str) L)))))
  )
(def rnd (java.util.Random.))
(defn get-word-for-prefix [prefix]
  "returns a random word for the given prefix (uses premap)
   returns nil if no words for given prefix"
  (let [poss-words (get premap prefix)]
    (if poss-words
      (nth poss-words (.nextInt rnd (count poss-words)))
      nil)))
(defn generateForWord [word]
  "if word isn't length multiple of L return false
   split word into L length segments
   get an option for each segment
   if any segment doesn't have an option return false
   return in a list, each option"
  (if (not= (mod (.length word) L) 0)
    false
    (let [seg-list (str-split word L)
          res-list (map get-word-for-prefix seg-list)]
      (if (reduce (fn [a b] (and a b)) true res-list)
        res-list
        false))))
(defn generatePuzzles [n]
  "generates n puzzles by finding a random word
   of length L that forms a puzzle"
  (when (> n 0)
    (let [possWord (getRandom wordset)
          possPuzz (generateForWord possWord)]
      (if possPuzz (do
                     (println possWord ":"
                              possPuzz ":" 
                              (map
                                (fn [word]
                                  (.concat "-" (suffix word)))
                                possPuzz))
                     (recur (- n 1)))
        (recur n)))))
(defn genPuzz []
  "generate single puzzle"
  (generatePuzzles 1))
(defn permutations [s]
  "sequence of permutations of s"
  (combo/permutations s))
(defn cart-prod [ls]
  "for each sublist in the list, interleave the elements
  (combos '((a b) (1 2))) => '((a 1) (a 2) (b 1) (b 2))"
  (apply combo/cartesian-product ls))
(defn findSolution [wordLst]
  "takes a list of words and uses their prefixes to try
  to find another word:
  (findSolution '('alacrity' 'terminus' 'bassinet')) -> 'alabaster'"
  (let [prefixLst (map (fn [word] (.substring word 0 L)) wordLst)
        possStrings (map (fn [strLst] (apply str strLst))
                         (permutations prefixLst))]
    (filter (fn [string] (get wordset string))
            possStrings)))
(defn solvePuzzle [clueLst]
  "--solver--
   takes list of suffixes, outputs possible solutions
   (solvePuzzle '(\"crity\" \"minus\" \"sinet\"))"
  (let [possibleWords (map (fn [end] (get suffmap end)) clueLst)]
    (remove (fn [ls] (empty? ls))
            (map findSolution (cart-prod possibleWords)))))
(use 'puzz)
(use 'test)
(use 'test.clj)
(use 'wordgame.test)
(use 'test)
(load-file "test.clj)
L
(load-file "test.clj")
(use 'puzz)
L
dict
(load-file "test.clj")
L
(use 'puzz)
(load-file "test.clj")
(use 'puzz)
(genPuzz)
(load-file)
(load-file "test.clj")
(use  'puzz)
(genPuzz)
(load-file "test.clj")
(use 'puzz)
(generatePuzzles 5)
(solvePuzzle '("ded" "rting" "centages"))
(add1 3)
'(a b c)
a
(a b c)
(use 'puzz :reload)
(load-file "test.clj")
(use 'puzz :reload)
(use 'puzz)
(genPuzz)
(solvePuzzle '("nt" "ffens" "imable"))
(load-file "test.clj")
(use 'puzz)
(solvePuzzle '("nt" "ffens" "imable"))
(generatePuzzles 5)
(generatePuzzles 10)
(solvePuzzle '("sumption" "ify" "ritory"))
(solvePuzzle '("usingly" "os" "shoo" "tfully"))
(load-file "test.clj")
(use 'puzz)
(genPuzz)
(solvePuzzle '("sitivities" "yric" "izes" "gn" "s"))
(load-file "test.clj")
(use 'puzz)
(genPuzz)
(load-file "test.clj")
(use 'puzz)
(genPuzz)
(load-file "test.clj")
(genPuzz)
(use 'puzz)
(genPuzz)
(load-file "test.clj")
(use 'puzz)
(genPuzz)
(load-file "test.clj")
(use 'puzz)
(genPuzz)
(load-file "test.clj") (use 'puzz)
(genPuzz)
(load-file "test.clj") (use 'puzz)
(genPuzz)
(load-file "test.clj") (use 'puzz)
(genPuzz)
(load-file "test.clj") (use 'puzz)
(genPuzz)
(load-file "test.clj") (use 'puzz)
(genPuzz)
(load-file "test.clj") (use 'puzz)
(genPuzz)
(compile 'puzz)
(load-file "test.clj")
(load-file "test.clj") (use 'puzz)
(compile 'puzz)
(compile puzz)
(use 'word-game)
(use 'puzz)
(use 'word-game)
ls
(use 'word-game.core)
(genPuzz)
(use 'word-game.core)
(genPuzz)
(use 'word-game.core)
(compile 'word-game.core)
(use 'wordgame.core)
(use 'word-game.core)
(compile 'word-game.core)
(use 'word-game.core)
(compile 'word-game.core)
(use 'word-game.core)
(compile 'word-game.core)
(use 'word-game.core)
(compile 'word-game.core)
(use 'word-game)
(use 'word-game.core)
(genPuzz)
(compile 'word-game.core)
(use 'word-game.core)
(genPuzz)
(compile 'word-game.core)
(use 'word-game.core)
(compile 'word-game.core)
(compile 'wordgame.core)
(doc reify)
(compile 'wordgame.core)
(contains? '(1 2 3) 2)
(member? '(1 2 3) 2)
(.indexOf '(1 2 3) 2)
(.indexOf '(1 2 3) 6)
(use 'wordgame.core)
(genPuzz)
(wordgame.core.genPuzz)
(-genPuzz)
(.indexOf "this is a test" " ")
(let [str "this is a test"]
(subs str 0 (.indexOf str " ")))
(let [str "banjos : band, joshes : -d, -hes"
]
  (subs str (+ 2 (.lastIndexOf str ":")))
)
(let [str "banjos : band, joshes : -d, -hes"]
(.replace str '(\- \,) \space)
)
(let [str "banjos : band, joshes : -d, -hes"]
(.replace str \- \space)
)
(let [str "banjos : band, joshes : -d, -hes"]
(.replace str \- nil))
(split "this is a test" "s/ /")
(split "this is a test" #" ")
(split "this is a test" #"s/ /")
#" "
(split "this is a test" #" ")
(.split "this is a test" #" ")
(.split "this is a test" " ")
(split "this is a test" " ")
(split "thi si s atest" #" ")
(clojure.string/split "thi si s atest" #" ")
(clojure.string/split "thi si s a    test" #" ")
(remove (fn [str] (= (.length str) 0))(clojure.string/split "thi si s a    test" #" ")
)
(use 'wordgame.core)
(genPuzz)
(core.genPuzz)
(-genPuzz)
(use 'wordgame.core)
(compile 'wordgame.core)
(compile 'wordgame.PuzzleGen)
(defn getFirstWord [str]
  "extracts the first word from the given string"
  (subs str 0 (.indexOf str " ")))
(defn rmChar [str ch]
  "removes instances of ch from str"
  (.replace str ch \space))
(defn splitOnSpaces [str]
  "splits str into a list of strings on spaces"
  (remove (fn [s]
            (= (.length s) 0))
          (clojure.string/split str #" "))
  )
(defn getHints [puzzStr]
  "extracts the hints from the given puzzle string
   returns them as a list of strings"
  (splitOnSpaces (clojure.string/trim (rmChar (rmChar (subs puzzStr (+ 2 (.lastIndexOf puzzStr ":"))) \,) \-)))
  )
(defn puzz "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers
"
)
(defn puzz "a puzz" "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers")
(defn puzz (do "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers"))
(getFirstWord "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers")
(splitOnSpaces "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers")
(getHints "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers")
(.firstIndexOf "abc" "b")
(.indexOf "abc" "b")
(.indexOf "abcbabc" "b")
(defn getClueWords [puzzStr]
  "extracts clues"
  (splitOnSpaces (clojure.string/trim
                   (rmChar (subs puzzStr
                                 (+ 2
                                   (.indexOf puzzStr ":"))
                                 (- (.lastIndexOf puzzStr ":")
                                    1))
                           \,))))
(getClueWords  "predesignate : presents, despotic, ignorantly, ateliers : -sents, -potic, -orantly, -liers")
(defrecord Test [a b])
(:a (->Test 1 2))
(:b (->Test 1 2))
(compile 'wordgame.PuzzleGen)
(compile 'wordgame.Puzzle 'wordgame.PuzzleGen)
(use 'wordgame.Puzzle)
(compile 'wordgame.Puzzle)
(compile 'wordgame.PuzzleGen)
(use 'wordgame.PuzzleGen)
(use 'wordgame.Puzzle)
(compile 'wordgame.PuzzleGen)
(compile 'wordgame.Puzzle)
(compile 'wordgame.PuzzleGen)
:bn
(compile 'wordgame.Puzzle)
(compile 'wordgame.PuzzleGen)
(use 'wordgame.Puzzle)
(compile 'wordgame.Puzzle)
